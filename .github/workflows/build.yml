name: Build and Test

on:
  push:
    branches: [ main, develop, '001-acp-protocol-spec' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake doxygen
    
    - name: Configure with CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                 -DCMAKE_C_COMPILER=${{ matrix.compiler }} \
                 -DACP_BUILD_TESTS=ON \
                 -DACP_BUILD_EXAMPLES=ON
    
    - name: Build with CMake
      run: cmake --build build --parallel
    
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --verbose
    
    - name: Build with Make
      run: |
        make clean || true
        make all CC=${{ matrix.compiler }}
    
    - name: Run Make tests  
      run: make check CC=${{ matrix.compiler }}
    
    - name: Generate documentation
      if: matrix.compiler == 'gcc' && matrix.build_type == 'Release'
      run: make docs

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        brew install cmake doxygen
    
    - name: Configure with CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                 -DACP_BUILD_TESTS=ON \
                 -DACP_BUILD_EXAMPLES=ON
    
    - name: Build with CMake
      run: cmake --build build --parallel
    
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --verbose
    
    - name: Build with Make
      run: make all
    
    - name: Run Make tests
      run: make check

  build-windows-mingw:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-make
          mingw-w64-x86_64-doxygen
    
    - name: Configure with CMake
      shell: msys2 {0}
      run: |
        mkdir build
        cd build
        cmake .. -G "MinGW Makefiles" \
                 -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                 -DACP_BUILD_TESTS=ON \
                 -DACP_BUILD_EXAMPLES=ON
    
    - name: Build with CMake
      shell: msys2 {0}
      run: cmake --build build --parallel
    
    - name: Run tests
      shell: msys2 {0}
      run: |
        cd build
        ctest --output-on-failure --verbose

  static-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-tidy
    
    - name: Run cppcheck
      run: |
        cppcheck --enable=all --error-exitcode=1 \
                 --suppress=missingIncludeSystem \
                 --suppress=unusedFunction \
                 --inline-suppr \
                 *.c *.h
    
    - name: Configure for clang-tidy
      run: |
        mkdir build
        cd build  
        cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    
    - name: Run clang-tidy
      run: |
        clang-tidy --checks='-*,readability-*,performance-*,bugprone-*' \
                   --warnings-as-errors='*' \
                   *.c -- -std=c99

  package-artifacts:
    needs: [build-linux, build-macos, build-windows-mingw]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build release artifacts
      run: |
        # Linux x64
        mkdir -p artifacts/linux-x64
        cmake -B build-linux -DCMAKE_BUILD_TYPE=Release
        cmake --build build-linux
        cp build-linux/libacp.a artifacts/linux-x64/
        cp build-linux/libacp.so artifacts/linux-x64/
        
        # Package headers
        mkdir -p artifacts/include
        cp acp_*.h artifacts/include/
        
        # Create tarball
        tar -czf acp-v0.3.0-linux-x64.tar.gz -C artifacts .
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: acp-libraries
        path: |
          *.tar.gz
          artifacts/